export default class passwordGenerator{constructor(){const alphabet="abcdefghijklmnopqrstuvwxyz";return this.alphabetArray=alphabet.split(""),this.alphabetToUpperCaseArray=alphabet.toUpperCase().split(""),this.symbolsArray="@#$%&!?-+=".split(""),this.numberArray="0123456789".split(""),this.pickArray=[],this.setOptions({passwordLength:16,includeSymbols:!0,includeLowerCase:!0,includeUpperCase:!0,includeNumbers:!0}),this}generate(){const options=this.options,characterList=this.setCharacterList(),pick=[];for(let i=0;i<options.passwordLength;i++){const randomPick=this.randomPickFromArray(characterList),getPick=this.randomPickFromArray(randomPick);pick.push(getPick)}return pick.join("")}randomPickFromArray(array){const randomBuffer=new Uint32Array(1);window.crypto.getRandomValues(randomBuffer);let randomNumber=randomBuffer[0]/4294967296;return array[Math.floor(randomNumber*array.length)]}setOptions(newOptions){return null==newOptions&&(newOptions={}),this.options={passwordLength:newOptions.passwordLength,includeSymbols:newOptions.includeSymbols,includeLowerCase:newOptions.includeLowerCase,includeUpperCase:newOptions.includeUpperCase,includeNumbers:newOptions.includeNumbers},this}setCharacterList(){const options=this.options,characterArray=[];return options.includeLowerCase&&characterArray.push(this.alphabetArray),options.includeUpperCase&&characterArray.push(this.alphabetToUpperCaseArray),options.includeSymbols&&characterArray.push(this.symbolsArray),options.includeNumbers&&characterArray.push(this.numberArray),characterArray}}